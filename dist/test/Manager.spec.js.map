{"version":3,"sources":["test/Manager.spec.ts"],"names":[],"mappings":";AAAA,yCAAyC;AACzC,QAAO,kBACP,CAAC,CADwB;AACzB,QAAO,cAEP,CAAC,CAFoB;AAErB,IAAY,IAAI,WAAM,UACtB,CAAC,CAD+B;AAChC,IAAY,GAAG,WAAM,QACrB,CAAC,CAD4B;AAC7B,0BAAqD,cAErD,CAAC,CAFkE;AAE5D,0BAAO,CAAQ;AAEtB,IAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;AAClC,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;AAE/B,IAAI,QAAQ,GAAG,IAAI,CAAA;AAEnB,eAAe,YAAoB,EAAC,QAAe;IAClD,mBAAmB;IACnB,cAAc;IACd,IAAM,IAAI,GAAG;QACZ,cAAc,EAAE,QAAQ;QACxB,YAAY,EAAE,YAAY;QAC1B,MAAM,EAAE,UAAQ,OAAO,CAAC,GAAG,CAAC,IAAI,MAAG;KACnC,CAAA;IAED,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;QACb,OAAO,IAAI,CAAC,UAAU,CAAC,CAAA;IAExB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAElB,OAAO,OAAO,CAAC,kBAAkB,CAAC,CAAA;IAClC,QAAQ,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAA;AACvC,CAAC;AAED,QAAQ,CAAC,UAAU,EAAC;IAInB,QAAQ,CAAC,YAAY,EAAC;QACrB,UAAU,CAAC;YACV,KAAK,CAAC,KAAK,EAAC,yBAAa,CAAC,CAAA;QAC3B,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uBAAuB,EAAC;YAC1B,IAAM,KAAK,GAAG,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAA;YAElC,IAAM,aAAa,GAAG,KAAK,CAAC,WAAW,CAAC,SAAS,CAAA;YACjD,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;YAEpD,IAAM,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,uBAAW,EAAC,aAAa,CAAC,EACjE,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,wBAAY,EAAC,aAAa,CAAC,CAAA;YAE/D,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;YAClC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;QAE1C,CAAC,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,2BAA2B,EAAC;QACpC,UAAU,CAAC;YACV,KAAK,CAAC,IAAI,EAAC,yBAAa,CAAC,CAAA;QAC1B,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,gCAAgC,EAAC,UAAC,IAAI;YAGxC,IAAI,EAAE,CAAA;QACP,CAAC,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;AACH,CAAC,CAAC,CAAA","file":"Manager.spec.js","sourcesContent":["//require('source-map-support').install()\nimport 'reflect-metadata'\nimport 'expectations'\n\nimport * as Dyno from '../index'\nimport * as Log from '../log'\nimport {DynoModelKey,DynoAttrKey,LocalEndpoint} from '../Constants'\n\nconst {Manager} = Dyno\n\nconst log = Log.create(__filename)\nlog.info('Starting test suite')\n\nlet Fixtures = null\n\nfunction reset(createTables:boolean,endpoint:string) {\n\t// Init dynamo type\n\t// using local\n\tconst opts = {\n\t\tdynamoEndpoint: endpoint,\n\t\tcreateTables: createTables,\n\t\tprefix: `test_${process.env.USER}_`\n\t}\n\n\tif (!endpoint)\n\t\tdelete opts['endpoint']\n\n\tManager.init(opts)\n\n\tdelete require['./fixtures/index']\n\tFixtures = require('./fixtures/index')\n}\n\ndescribe('dynotype',() => {\n\n\n\n\tdescribe('Decorators',() => {\n\t\tbeforeEach(() => {\n\t\t\treset(false,LocalEndpoint)\n\t\t})\n\n\t\tit('decorates a new model',() => {\n\t\t\tconst test1 = new Fixtures.Test1()\n\n\t\t\tconst constructorFn = test1.constructor.prototype\n\t\t\texpect(constructorFn).toBe(Fixtures.Test1.prototype)\n\n\t\t\tconst attrData = Reflect.getOwnMetadata(DynoAttrKey,constructorFn),\n\t\t\t\tmodelData = Reflect.getOwnMetadata(DynoModelKey,constructorFn)\n\n\t\t\texpect(attrData.length).toEqual(2)\n\t\t\texpect(modelData.attrs.length).toEqual(2)\n\n\t\t})\n\t})\n\n\tdescribe('Client connects and works',() => {\n\t\tbeforeEach(() => {\n\t\t\treset(true,LocalEndpoint)\n\t\t})\n\n\t\tit(\"Can create a table for a model\",(done) => {\n\n\n\t\t\tdone()\n\t\t})\n\t})\n})\n\n"],"sourceRoot":"/Users/jglanz/Development/dynotype/src"}