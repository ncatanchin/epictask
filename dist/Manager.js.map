{"version":3,"sources":["Manager.ts"],"names":[],"mappings":"AAAA,+EAA+E;;AAE/E,QAAO,kBACP,CAAC,CADwB;AAEzB,IAAY,CAAC,WAAM,QACnB,CAAC,CAD0B;AAC3B,IAAY,MAAM,WAAM,QAExB,CAAC,CAF+B;AAEhC,IAAY,GAAG,WAAM,OACrB,CAAC,CAD2B;AAC5B,uBAAqB,UACrB,CAAC,CAD8B;AAC/B,0BAAuC,aACvC,CAAC,CADmD;AAGpD,IAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;AAKlC,IAAiB,OAAO,CA0EvB;AA1ED,WAAiB,OAAO,EAAC,CAAC;IAKzB,IAAM,MAAM,GAAO,EAAE,CAAA;IAErB;;OAEG;IACH,IAAM,OAAO,GAAmB;QAC/B,YAAY,EAAE,IAAI;KAClB,CAAA;IAED,IAAI,KAAK,GAAG,KAAK,CAAA;IAEjB;;OAEG;IACH,IAAI,MAAa,CAAA;IAEjB;;OAEG;IACH,cAAqB,UAA0B;QAC9C,KAAK,GAAG,IAAI,CAAA;QAEZ,CAAC,CAAC,MAAM,CAAC,OAAO,EAAC,UAAU,CAAC,CAAA;QAE5B,MAAM,GAAG,IAAI,eAAM,CAAC,OAAO,CAAC,CAAA;IAC7B,CAAC;IANe,YAAI,OAMnB,CAAA;IAGD;QACC,MAAM,CAAC,KAAK,EAAC,+DAA+D,CAAC,CAAA;IAC9E,CAAC;IAED;;;;;;OAMG;IACH,uBAA8B,SAAgB,EAAC,WAAoB,EAAC,IAAkB;QACrF,UAAU,EAAE,CAAA;QAEZ,gCAAgC;QAChC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,uBAAW,EAAE,WAAW,CAAC,SAAS,CAAwB,CAAA;QAE9F,oCAAoC;QACpC,OAAO,CAAC,cAAc,CAAC,wBAAY,EAAC,IAAI,EAAC,WAAW,CAAC,SAAS,CAAC,CAAA;QAG/D,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,EAAC,IAAI,EAAC;YACpC,KAAK,EAAC,WAAW;SACjB,CAAC,CAAA;IACH,CAAC;IAbe,qBAAa,gBAa5B,CAAA;IAED,2BAAkC,MAAU,EAAC,WAAkB,EAAC,IAAsB;QACrF,UAAU,EAAE,CAAA;QAEZ,IAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAC,MAAM,EAAC,WAAW,CAAC,CAAA;QACtE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAC;YACf,IAAI,EAAC,QAAQ;YACb,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAC,MAAM,EAAC,cAAc,CAAC;YAC/C,GAAG,EAAC,WAAW;SACf,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,gBAAc,WAAa,EAAC,IAAI,CAAC,CAAA;QAC1C,IAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,uBAAW,EAAC,MAAM,CAAC,IAAI,EAAE,CAAA;QAChE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACrB,OAAO,CAAC,cAAc,CAAC,uBAAW,EAAC,UAAU,EAAC,MAAM,CAAC,CAAA;IACtD,CAAC;IAde,yBAAiB,oBAchC,CAAA;AACF,CAAC,EA1EgB,OAAO,GAAP,eAAO,KAAP,eAAO,QA0EvB;AAID;;GAEG;AACH,2BAA2B;AAE3B,OAAO;AACP,+BAA+B;AAC/B,OAAO;AACP,iDAAiD;AAEjD,gBAAgB;AAChB,MAAM;AAGN,uBAAuB;AAEvB,gBAAgB;AAChB,KAAK;AACL,IAAI","file":"Manager.js","sourcesContent":["/// <reference path=\"../node_modules/reflect-metadata/reflect-metadata.d.ts\" />\n\nimport 'reflect-metadata'\nimport * as AWS from 'aws-sdk'\nimport * as _ from 'lodash'\nimport * as assert from 'assert'\n\nimport * as Log from './log'\nimport {Client} from './Client'\nimport {DynoModelKey,DynoAttrKey} from './Constants'\nimport {IModelOptions,IAttributeOptions,IManagerOptions} from './Types'\n\nconst log = Log.create(__filename)\n\n\n\n\nexport namespace Manager {\n\n\n\n\n\tconst models:any = {}\n\n\t/**\n\t * Default options\n\t */\n\tconst options:IManagerOptions = {\n\t\tcreateTables: true\n\t}\n\n\tlet ready = false\n\n\t/**\n\t * Ref to aws client\n\t */\n\tlet client:Client\n\n\t/**\n\t * Set the manager options\n\t */\n\texport function init(newOptions:IManagerOptions) {\n\t\tready = true\n\n\t\t_.assign(options,newOptions)\n\n\t\tclient = new Client(options)\n\t}\n\n\n\tfunction checkReady() {\n\t\tassert(ready,'The system must be initialized before registering models, etc')\n\t}\n\n\t/**\n\t * Register a model with the system\n\t *\n\t * @param clazzName\n\t * @param constructor\n\t * @param opts\n\t */\n\texport function registerModel(clazzName:string,constructor:Function,opts:IModelOptions) {\n\t\tcheckReady()\n\n\t\t// Retrieve its attributes first\n\t\topts.attrs = Reflect.getOwnMetadata(DynoAttrKey, constructor.prototype) as IAttributeOptions[]\n\n\t\t// Define the metadata for the model\n\t\tReflect.defineMetadata(DynoModelKey,opts,constructor.prototype)\n\n\n\t\tmodels[clazzName] = _.assign({},opts,{\n\t\t\tclazz:constructor\n\t\t})\n\t}\n\n\texport function registerAttribute(target:any,propertyKey:string,opts:IAttributeOptions) {\n\t\tcheckReady()\n\n\t\tconst attrType = Reflect.getMetadata('design:type',target,propertyKey)\n\t\t_.defaults(opts,{\n\t\t\ttype:attrType,\n\t\t\ttypeName: _.get(attrType,'name','unknown type'),\n\t\t\tkey:propertyKey\n\t\t});\n\n\t\tlog.info(`Decorating ${propertyKey}`,opts)\n\t\tconst modelAttrs = Reflect.getMetadata(DynoAttrKey,target) || []\n\t\tmodelAttrs.push(opts)\n\t\tReflect.defineMetadata(DynoAttrKey,modelAttrs,target)\n\t}\n}\n\n\n\n/**\n * Management service\n */\n// export const Service = {\n\n// \t/**\n// \t * Save a persistable model\n// \t */\n// \tsave<T extends PersistableModel>(model:T):T {\n\n// \t\treturn null\n// \t},\n\n\n// \tget<T,K>(key:K):T {\n\n// \t\treturn null\n// \t}\n// }\n"],"sourceRoot":"/Users/jglanz/Development/dynotype/src"}