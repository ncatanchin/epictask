{"version":3,"sources":["log.ts"],"names":[],"mappings":";AACA,QAAO,UAQP,CAAC,CARgB;AAkCjB;;GAEG;AACH,IAAI,YAAY,GAAW,OAAO,CAAA;AAElC;;GAEG;AACH,aAAa,IAAI,EAAC,KAAK;IAAE,cAAO;SAAP,WAAO,CAAP,sBAAO,CAAP,IAAO;QAAP,6BAAO;;IAC/B,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACxB,KAAK,GAAG,MAAM,CAAA;IAEf,IAAM,GAAG,GAAG,MAAI,IAAI,WAAM,KAAK,UAAK,IAAI,CAAC,KAAK,EAAI,CAAA;IAClD,YAAY,CAAC,KAAK,QAAlB,YAAY,GAAQ,GAAG,SAAI,IAAI,EAAC,CAAC;AAClC,CAAC;AAED;;GAEG;AACU,4BAAoB,GAAG;IAEnC,MAAM,YAAC,IAAW;QAKjB;;;;WAIG;QACH,IAAM,MAAM,GAAG,EAAE,CAAA;QAEjB,gBAAgB;QAChB,IAAM,MAAM,GAAG,CAAC,OAAO,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,CAAC,CAAA;QAC9C,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;YACpB;;;;eAIG;YACH,MAAM,CAAC,KAAK,CAAC,GAAG;gBAAC,cAAO;qBAAP,WAAO,CAAP,sBAAO,CAAP,IAAO;oBAAP,6BAAO;;gBACvB,GAAG,gBAAC,IAAI,EAAC,KAAK,SAAI,IAAI,EAAC,CAAA;YACxB,CAAC,CAAA;QACF,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,MAAiB,CAAA;IAEzB,CAAC;CACD,CAAA;AAED;;GAEG;AACH,IAAI,aAAa,GAAkB,4BAAoB,CAAA;AAEvD;;;;;GAKG;AACH,0BAAiC,gBAA+B;IAC/D,aAAa,GAAG,gBAAgB,CAAA;AACjC,CAAC;AAFe,wBAAgB,mBAE/B,CAAA;AAED,yBAAgC,eAAuB;IACtD,YAAY,GAAG,eAAe,CAAA;AAC/B,CAAC;AAFe,uBAAe,kBAE9B,CAAA;AAEA,gBAAuB,IAAW;IACjC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;AAClC,CAAC;AAFe,cAAM,SAErB,CAAA","file":"log.js","sourcesContent":["\nimport 'es6-shim'\n\n/**\n * Logger interface\n * \n * @export\n * @interface ILogger\n */\nexport interface ILogger {\n\tdebug:(...args) => void\n\tinfo:(...args) => void\n\twarn:(...args) => void\n\terror:(...args) => void\n}\n\n\n/**\n * Create logger instances for output\n * \n * @export\n * @interface ILoggerFactory\n */\nexport interface ILoggerFactory {\n\t/**\n\t * Return a new logger for the supplied\n\t * name/category\n\t * \n\t * @param {string} name (description)\n\t * @returns {ILogger} (description)\n\t */\n\tcreate(name:string):ILogger\n}\n\n\n/**\n * Current logger output\n */\nlet loggerOutput:ILogger = console\n\n/**\n * Use internal node console by default\n */\nfunction log(name,level, ...args) {\n\tif (!loggerOutput[level])\n\t\tlevel = 'info'\n\t\n\tconst msg = `[${name}] [${level}] ${args.shift()}`\t\n\tloggerOutput[level](msg,...args);\n}\n\n/**\n * Default log factory, uses console\n */\nexport const DefaultLoggerFactory = {\n\t\n\tcreate(name:string):ILogger {\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t/**\n\t\t * (description)\n\t\t * \n\t\t * @param level (description)\n\t\t */\n\t\tconst logger = {}\n\t\t\n\t\t// Create levels\n\t\tconst levels = ['debug','info','warn','error']\n\t\tlevels.forEach((level) => {\n\t\t\t/**\n\t\t\t * (description)\n\t\t\t * \n\t\t\t * @param args (description)\n\t\t\t */\n\t\t\tlogger[level] = (...args) => {\n\t\t\t\tlog(name,level,...args)\n\t\t\t}\n\t\t})\n\t\t\n\t\treturn logger as ILogger\n\t\t\n\t}\n}\n\n/**\n * Internal core logger factory\n */\nlet loggerFactory:ILoggerFactory = DefaultLoggerFactory\n\n/**\n * Change the internal default logger\n * \n * @export\n * @param newLoggerFactory new logger factory\n */\nexport function setLoggerFactory(newLoggerFactory:ILoggerFactory) {\n\tloggerFactory = newLoggerFactory\n}\n\nexport function setLoggerOutput(newLoggerOutput:ILogger) {\n\tloggerOutput = newLoggerOutput\n}\n\n export function create(name:string) {\n\t return loggerFactory.create(name)\n }"],"sourceRoot":"/Users/jglanz/Development/dynotype/src"}